schema: 
  schema_id: hello
  name: 大家好
  version: "7"
engine: 
  processors: 
    - key_binder      # 搶在其他 processor 處理之前判定是否換頁用的符號鍵，否则【，。】就会由punctuator上屏
    - speller         # 把字母追加到编码串
    - punctuator      # 处理符号按键
    - selector        # 選字、換頁
    - navigator       # 移動插入點
    - express_editor  # 空格确认当前输入，其他字符直接上屏
  segmentors: 
    - abc_segmentor       #标记输入码的类型
    - punct_segmentor     # 划界，与前后方的其他编码区分开 
    - fallback_segmentor  #fallback_segmentor 將輸入碼連綴成一段。於是重新佈署後，按下字符鍵不再直接上屏，而顯示爲輸入碼 
  translators:
    - echo_translator  #（没有其他结果时）创建一个与编码串一个模样的候选项
    - punct_translator # 转换
    - table_translator #码表式转换，使用translator.dictionary指定的词典名
translator: 
  dictionary: hello  # 设定table_tarnslator使用的词典名
punctuator:
  import_preset: default
key_binder:
  bindings: 
    - when: paging  #当发生已经向后的换页时
      accept: comma #将逗号键……
      send: Page_Up #关联到[向前换页]，于是navigator将收到一个Page_up
    - when: has_menu
      accept: period
      send: Page_Down
speller:
  algebra: 
    - "erase/^xx$/"
    - "derive/e/a"
##工作流程是這樣的：

# speller 將字母鍵加入輸入碼序列
# abc_segmentor 給輸入碼打上標籤 abc
# table_translator 把帶有 abc 籤的輸入碼以查表的方式譯爲中文
# table_translator 所查的碼表在 translator/dictionary 所指定的詞典裏

# 上一个版本在输入候选项之后会连带着输入一个数字（自己选的那个数字）

# 现在，新加入的
  # engine: 
  #   processors:
  #     - selector 除了數字鍵，還響應前次頁、上下方向鍵。因此選擇第二候選「再會」，既可以按數字2，又可以按方向鍵「↓」將「再會」高亮、再按空格鍵確認。
  #     - navigator 處理左右方向鍵、Home、End鍵，實現移動插入點的編輯功能。有兩種情況需要用到他：一是發現輸入碼有誤需要定位修改，二是縮小候選詞對應的輸入碼的範圍、精準地編輯新詞組。

# 這次的修改，要注意 punctuator, punct_segmentor, punct_translator 相對於其他組件的位置。

# punctuator/import_preset 告訴 Rime 使用一套預設的符號表。他的值 default 可以換成其他名字如 xxx，則 Rime 會讀取 xxx.yaml 裏面定義的符號表。

# 如今再敲 hello. 就會得到「大家好。」


#v7
# 早先流行用 - 和 = 這一對符號換頁，如今流行用 , 和 . 。 在第六版中「，」「。」是會頂字上屏的。現在要做些處理以達到一鍵兩用的效果。

# Rime 提供了 key_binder 組件，他能夠在一定條件下，將指定按鍵綁定爲另一個按鍵。對於本例就是：

# 當展現候選菜單時，句號鍵（period）綁定爲向後換頁（Page_Down）
# 當已有（向後）換頁動作時，逗號鍵（comma）綁定爲向前換頁（Page_Up）
# 逗號鍵向前換頁的條件之所以比句號鍵嚴格，是爲了「，」仍可在未進行換頁的情況下頂字上屏。
